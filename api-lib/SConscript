#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

import os

from SCons.Node.FS import Entry as entry_class
from SCons.Node.FS import File as file_class
from SCons.Node.FS import Dir as dir_class

Import('BuildEnv')
env = BuildEnv.Clone()

cd_cmd = 'cd ' + Dir('.').path + ' && '

repo_top = env['api_repo_path']

autogen_infra_sources = [
    repo_top + '/generateds/generateDS.py',
    repo_top + '/generateds/TypeGenerator.py',
    repo_top + '/generateds/ccmap.py',
    repo_top + '/generateds/idl_parser.py',
    repo_top + '/generateds/ifmap_global.py',
    repo_top + '/generateds/ifmap_model.py',
    repo_top + '/generateds/ifmap_frontend.py',
]

autogen_sources = [
    repo_top + '/schema/all_cfg.xsd',
    repo_top + '/schema/vnc_cfg.xsd',
    repo_top + '/schema/bgp_schema.xsd',
    repo_top + '/schema/ietf-l3vpn-schema.xsd',
    repo_top + '/schema/smi-base.xsd',
]

setup_sources = [
    'doc',
    'etc',
    'vnc_api',
    '.coveragerc',
    '.pylintrc',
    '.stestr.conf',
    'MANIFEST.in',
    'README.md',
    'requirements.txt',
    'setup.cfg',
    'setup.py',
    'test-requirements.txt',
    'tox.ini',
]

generated_yaml_schema_files = [Dir(env['TOP']).abspath + '/schema/yaml/base.yml']
# Remove target files, to force scons to build SyncSchema always
for tgt_file in generated_yaml_schema_files:
    if os.path.exists(tgt_file):
        os.remove(tgt_file)
sync_yaml_schema = env.SyncSchema(generated_yaml_schema_files,
                             repo_top + '/schema/all_cfg.xsd')
setup_sources_rules = []
for file in setup_sources:
    entry = Entry(repo_top + '/api-lib/%s' % file)
    path = Entry(repo_top + '/api-lib/%s' % file).abspath
    if isinstance(entry, (entry_class, file_class)):
        setup_sources_rules.append(env.Install(Dir('.'), entry))
    elif isinstance(entry, dir_class):
        setup_sources_rules.append(env.Install('vnc_api', Glob('%s/*' % path)))

autogen_script = File(repo_top + '/generateds/generateDS.py').path
autogen_cmd = '%s -f -o %s -g ifmap-frontend' % (
    autogen_script, Dir('vnc_api/gen/resource').path)

env.Append(ENV={'HEAT_BUILDTOP': Dir(env['TOP']).abspath})

generated_files = ['vnc_api/gen/contrail_openapi.rst']
generated_rule = env.Command(generated_files,
                             repo_top + '/schema/all_cfg.xsd',
                             autogen_cmd + ' $SOURCE')


remote_setup_sources = [
    ("", repo_top + '/LICENSE'),
    ("", repo_top + '/base/version.info'),
    ("vnc_api/gen", repo_top + '/generateds/generatedssuper.py'),
    ("vnc_api/gen", repo_top + '/generateds/cfixture.py'),
]
remote_setup_sources_rules = []
for dest, file in remote_setup_sources:
    remote_setup_sources_rules.append(env.Install(dest, file))

doc_sources_rules = SConscript(dirs=['doc'], exports='BuildEnv')

sdist_depends = [remote_setup_sources_rules]
sdist_depends.extend(generated_rule)
sdist_depends.extend(setup_sources_rules)
sdist_depends.extend(doc_sources_rules)

version_file_path = File(repo_top + '/base/version.info').abspath
with open(version_file_path, 'r') as f:
    version = f.read().strip('\n').strip('\t')
sdist_gen = env.Command('dist/contrail-api-client-{}.tar.gz'.format(version),
                        'setup.py', cd_cmd + 'python setup.py sdist')

env.Default(sdist_gen)

# generated files depend on autogeneration infra parts
env.Depends(autogen_infra_sources, remote_setup_sources_rules)
env.Depends(generated_rule, [autogen_infra_sources, autogen_sources])
env.Depends(setup_sources_rules, autogen_infra_sources)

# install everything before building distribution
env.Depends(sdist_gen, [sync_yaml_schema, sdist_depends])

def SymLink(target, source, env):
    os.symlink(os.path.abspath(str(source[0])), os.path.abspath(str(target[0])))

if 'install' in BUILD_TARGETS:
   Execute('rm -f {0}/build.txt {0}/install2.txt {0}/install3.txt'.format(Dir('.').abspath))
   build_cmd = env.Command('build.txt', 'setup.py',
                             cd_cmd + 'python setup.py build && touch build.txt')
   env.Depends(build_cmd, sdist_depends)
   install_cmd = env.Command('install2.txt', 'build.txt',
                             cd_cmd + 'python setup.py install %s && touch install2.txt' %
                             env['PYTHON_INSTALL_OPT'])
   env.Depends(install_cmd, build_cmd)
   env.Alias('install', install_cmd)
   # Install in python3 path
   setup_link_cmd = env.Command("setup3.py", "setup.py", SymLink)
   env.Depends(setup_link_cmd, sdist_depends)

   py3_install_cmd = env.Command('install3.txt', ['build.txt', 'setup3.py'],
                             cd_cmd + 'python3 setup3.py install %s && touch install3.txt' %
                             env['PYTHON_INSTALL_OPT'])
   env.Depends(py3_install_cmd, build_cmd)
   env.Alias('install', py3_install_cmd)

env.Alias('install',
    env.Install(env['INSTALL_CONF'], 'etc/contrail/vnc_api_lib.ini'))

env.SetupPyTestSuiteWithDeps(sdist_gen, use_tox=True, sdist_depends=[])
